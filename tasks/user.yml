---
- name: generate passwod salt for new user
  shell: mkpasswd -l 20
  with_dict: "{{os_users}}"
  register: salt
  ignore_errors: true
  changed_when: false

- name: generate passwod sha512
  command: >
    echo python -c \'import crypt, getpass, pwd; print crypt.crypt(\"{{ os_users[item.0].password }}\", \"\$6\${{ item.1.stdout }}\$\")\'
  with_together: 
    - "{{os_users}}"
    - salt.results
  when:
    - "os_users[item.0].login == 'login'"
  register: passwordHashCommand
  ignore_errors: true
  changed_when: false

- name: passwordHash
  command: "{{ item.1.stdout }}"
  with_together: 
    - "{{os_users}}"
    - passwordHashCommand.results
  when:
    - "os_users[item.0].login == 'login'"
  register: passwordHash
  ignore_errors: true
  changed_when: false

- name: ssh connect check
  become: no
  local_action: >
    command sshpass -p {{ item.value.password }}  ssh {{ inventory_hostname }} -l {{ item.key }}
  with_dict: "{{ os_users }}"
  when:
    - "item.value.login == 'login'"
  register: ssh_login 
  ignore_errors: true
  changed_when: false

- name: create /sbin/nologin user
  user: name="{{ item.key }}" state=present group="{{ item.value.group }}"
        comment="{{ item.value.comment }}"
        shell="{{ item.value.shell }}"
  when:
    - ssh_login | failed
    - "item.value.login == 'nologin'"
  with_dict: "{{os_users}}"

- name: create user when password changed
  user: name="{{ item.0 }}" state=present group="{{ os_users[item.0].group }}"
        password="{{ item.1.stdout }}" comment="{{ os_users[item.0].comment }}"
        shell="{{ os_users[item.0].shell }}"
  with_together:
    - "{{os_users}}"
    - passwordHash.results
  when: 
    - ssh_login | failed
    - "os_users[item.0].login == 'login'"

- name: create user when password not changed
  user: name="{{ item.0 }}" state=present group="{{ os_users[item.0].group }}"
        comment="{{ os_users[item.0].comment }}"
        shell="{{ os_users[item.0].shell }}"
  with_together:
    - "{{os_users}}"
    - passwordHash.results
  when: 
    - ssh_login | success
    - "os_users[item.0].login == 'login'"

